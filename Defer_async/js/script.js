//Оптимизация загрузки скриптов


// Вариант подключения динамичских скриптов

//По умолчанию динамические скрипты будут работать как async, то есть ждать кого-то не будут. 


// //чтобы убрать работу как async по умолчанию - мы создаем функцию куда помещаем наше создание динамических скриптов и script.async = false; 
// function loadScript(src) {
//     const script = document.createElement('script');
//     script.src = src;
//     script.async = false; 
//     document.body.append(script);
// }

// //вызываем функцию с новыми скриптами и они теперь будут всегда работать поочередно так, как мы их прописали в порядке в коде сначала test потом some
// loadScript('js/test.js');
// loadScript('js/some.js');



// // <script defer src = "script.js"></script>
// // Атрибут defer - говорит браузеру что он должен продолжать загружать страницу и
// // загружать скрипт в фоновом режиме а затем запустить скрипт

// //то есть когда браузер видит defer - он не блокирует прогрузку DOM а грузит скрипт в фоне и только после полной загрузки страницы запустит скрипт в работу

// //кроме того при подключении нескольких скриптов - они будут выполняться поочередно

// const p = document.querySelectorAll('p');
// console.log(p);



// Атрибут async - страница не ждет асинхронных скриптов, и сам этот скрипт тоже никого не ждет и запускается сразу как только был загружен

//при этом какой скрипт с такими атрибутами выполнится первым - неизвестно, кроме того: какой быстрее был загружен

//такие скрипты хорошо подключать, если они не зависят от DOM- структуры или других скриптов. Например метрики, счетчики и тд - которые никак не привязаны к элементам сайта


