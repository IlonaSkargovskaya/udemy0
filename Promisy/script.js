// //Promisy - обещания - технология, которая помогает работать с различными асинхронными операциями (ВАЖНО нам дождаться ответа от сервера а только потом выполнять какие-то операции - иначе полученное значение будет неверным)

// //для того, чтобы не было огромного кол-ва вложенных колбэк функций (callback hell) или другого кода внутрь асинхронного ( например внутрь setTimeout или внутрь ответа от сервера - используются промисы, которые помогают выполнять дальше код ЕСЛИ ответ от сервера получен положительный или отрицательный)

// //Промисы - помогают выполнять дальнейший код учитывая задержку ответа от сервера или например окончания таймера

// в JS ВСЕГДА сначала выполнится синхронный код, затем асинхронный

let a = 7;


//создаем промис в виде объекта
//с аргументами в виде функций resolve и reject
let b = new Promise(function(resolve, reject) {
    setTimeout(() => {
        //ЕСЛИ таймаут завершен успешно - вызываем функцию Resolve()
        resolve(a = 99);        
    }, 2000);
});


console.log(a); // 7

//здесь мы говорим ЧТО мы делаем когда промис отработал
//с помощью метода имяПромиса.then(функция любая)

b.then(function() {
    console.log(a); // 99
});


            // Пример 2
console.log('Запрос данных');

const req = new Promise(function(resolve, reject){

    setTimeout(() => {
        console.log('Подготовка данных ...');
    
        const product = {
            name: 'TV',
            price: 2000
        };
    
        resolve(product); // если все ок - вызываем resolve(data)
    }, 2000);

});

//прописываем цепочку изменений объекта через then
req.then((product) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            product.status = 'order';
            resolve(product);
        }, 2000);
    });
}).then(data => {     
    data.modify = true;
    return data;   
}).then((data) => {
    console.log(data);
//прописывается в конце, когда срабатывает reject и выполняется если что-то пошло не так
}).catch(() => {
    console.error('Произошла ошибка');
//обычно сюда можно поместить например очистку формы
}).finally(() => {
    console.log('Finally');
});



const test = (time) => {
    return new Promise((resolve,reject) => {
        setTimeout(() => resolve(), time);
    });
};

// //вызываем тест и говорим что через секунду - выводим 1000ms в консоль
// test(1000).then(() => console.log('1000ms'));
// //вызываем тест и говорим что через 2 секунды - выводим 2000ms в консоль
// test(2000).then(() => console.log('2000ms'));


//Promise.all() - дожидается окончания работы ВСЕХ промисов, а только потом выполнит те или иные действия

Promise.all([test(1000), test(2000)]).then (() => {
    console.log('All'); //оба промиса выполнились через 2 секунды
});


//Promise.race() - когда самый первый из промисов выполнится первым - тогда выполняем

Promise.race([test(1000), test(2000)]).then (() => {
    console.log('Race'); //когда выполнился первый через 1 секунду
});



// API - application programming interface
// апишки, апи - что-то предоставляет нам возможность работать с готовыми методами или использовать какие-то технологии (например гугл мэпс апи = гугл дает нам возможность работать с его картами, модицифровать их и тд)

//API = интерфейс который уже встроен в ту или иную систему и мы с ним можем работать

          

