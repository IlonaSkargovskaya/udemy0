//Функции

//пишем в виде CamelCase - глаголом

//анонимные функции вызываются только здесь и сейчас и к ней нельзя будет потом обратиться

let num = 20;
function showFirstMessage(text) {
    console.log(text);    
    num = 10;
}

showFirstMessage('Hello world');
console.log(num);  


// Аргументы функции

const usdCurr = 28;
const euroCurr = 32;

function convert (amount, curr) {
    console.log(curr * amount);
}

//в данном варианте мы передаем 1 параметру число amount, а второму присваиваем значение переменной UsdCurr куда могут поступать любые данные отовсюду
convert(30, usdCurr);
convert(30, euroCurr);


//Замыкание функции
// - сама функция со всеми внешними переменными которые ей доступны
// если функция не нашла переменную внутри себя - она пошла наверх искать



//return - возвращает значение работы функции во внешний мир
// - как только функция находит слово - она завершается



//Function Declaration - можно вызывать до того как объявлена функция и использовать в любом месте страницы

// function nerTime() {
//     console.log('hello');
// }

//Function Expression - функциональное выражение = присваиваем переменной функцию и тогда ее можно вызвать только тогда, когда работа всего кода дошла до нее И обязательно ставить в конце точку с запятой, тк создана перменная

// const logger = function() {
//     console.log('Hello');
// };

// logger();




// Стрелочные функции
// не имеет своего контекста вызова.

// const calc = (a,b) => {
//     return a + b;
// };

// console.log(calc(1, 5));