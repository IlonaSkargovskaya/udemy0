//Рекурсия - функция которая вызывает саму себя

//Пример: возведение в степень

function pow(x, n) {
  let result = 1; //присваиваем 1, тк при умножении на 0 всегда будет 0

  for (let i = 0; i < n; i++) {
    result = result * x; // result *= x;
  }

  
  console.log(result);
  return result;
}

// тоже самое но используя рекурсию (вызов этой же функции внутри себя)

function pow(x, n) {
  if (n === 1) {
    return x;
  } else {
    return x * pow(x, n - 1);
  }
}


console.log(pow(3, 6));


//База рекурсии - когда точно завершается функция (в нашем случае при n = 1)

//Шаг рекурсии - (n-1) - что происходит после очередного вызова чтобы не было зацикленности

//Глубина рекурсии - общее кол-во вложенных функций включая начальную


//Object.values - передает нам сразу же массив [значений свойств] объекта

//Array.isArray() - метод для проверки является ли что-то массивом. Вернет true или false



// Самые простые примеры рекурсии

// зацикливаем функцию, тк она вызывает сама себя. Переполняется стек вызова
// let t = 0;
// function f1() {
//   t++;
//   console.log(t);

//   if (t === 100) {
//     return;
//   }
  
//   f1(); 
// }

// f1();

// function f2() {
//   let count = '';
//   for (let i = 1; i <=30; i++) {
//     count = count + i + ' ';
//   }
//   console.log(count);
// }

// f2();


// то же самое рекурсией
let count = '';
let i = 0;

function f3() {
  i++;
  count = count + i + ' ';
  if (i >= 30) {
    return;
  }
  f3();
}

// f3();
// console.log(count);



// Факториал
// Из математики 5! = 5*4*3*2*1 = 120

function fac(num) {
  //условие экстренного прекращения рекурсии когда num меньше 0
  if (num < 0) {
    return;
  }
   //базовая проверка заканичивающая дейтсвие рекурсии
  if (num === 1) {
    return num;
  }
  //сама рекурсия когда функция вызывает саму себя
  return num * fac(num - 1);
};

console.log(fac(5)); // 120


// Напишите функцию, которая вычисляет факториал. Важно проверить что принимаемое значение это число, а также что оно не дробное

function factorial(n) {
    
  if(typeof(n) !== 'number' || Number.isInteger(n) === false) {
      return 'Введите целое число';
  }
  
  if (n <= 0) {
      return 1;
  } else {
      return n * factorial(n - 1);
  }
  
}

console.log(factorial(7));



//найти наибольший общий делитель двух положительных чисел

function nod(a, b) {
  // если b = 0 то возвращаем a
  if (b === 0) {
    return a;
  } else {
    return nod(b, a % b);
  }
}

console.log(nod(12, 4));


//Числа Фибоначчи
// каждое следующее число = сумме двух предыдущих

//решается через массив чисел куда записываем последовательно суммы

function fibonacci(n) {
  //условие выхода из рекурсии n === 1
  if (n === 1) {
    return [0, 1];
  } else {
    // если число больше 1 - создаем переменную суммы, где вызываем эту же функцию и с каждым шагом уменьшаем на 1 переданное нам число
    let sum = fibonacci(n - 1);
    //записываем в массив сумму двух предыдущих элементов массива
    sum.push(sum[sum.length - 1] + sum[sum.length - 2]);
    return sum;
  }
}

console.log(fibonacci(5));






