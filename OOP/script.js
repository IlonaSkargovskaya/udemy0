//Прототипно-ориентированное программирование

//Прототип - это механизм, с помощью которого объекты наследуют
// свойства друг у друга в JS

//Объектно ориентированное программирование - наука о том, как делать правильную архитектуру

/*
Пример: 
есть машина(объект) - и у нее есть разные свойства: двигатель, кузов, колеса и тд
Методы машины - езда, перевозка людей и тд
БМВ, Мерседес и тп - будут наследовать основные свойства от прототипа "машина"

Любая вещь в JS - объект со своими функциями и методами

Пример 2:
Есть у нас строка - это примитивный тип данных, но если применяем к ней метод length - это уже будет объект на время работы, а вернется опять строка

- ОЧень удобно использовать прототипы например для модальных окон: по умолчанию оно может содержать базовый функционал, ширину, высоту и тп
- а от такого прототипа мы можем создавать модифицированные мелкие окна

*/

const soldiers = {
  health: 400,
  armor: 100,
  sayHello: function() {
    console.log('Hello');
  }
};

// const john = {
//   health: 200
// };

// console.log(john); //основное свойство он получает health: 200, но также прототип передает ему и health 400 и armor => мы можем обратиться к нему john.armor


//Установить прототип на уже существующего ребенка

//Юзфул вариант: Object.setPrototypeOf(кому_присвоить, откуда_взять)
// Object.setPrototypeOf(john, soldiers);


//Если ребенок не создан 

//Звучит так: я создаю новый объект John который будет прототипно наследоваться от soldiers
const john = Object.create(soldiers);

john.sayHello();
